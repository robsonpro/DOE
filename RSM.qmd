---
title: "Metodologia de superfície de resposta"
author: "Robson Bruno Dutra Pereira"
format: html
editor: visual
---

## Exemplo RSM, k = 2, planejamento CCD

Determinação de cobre em diferentes amostras de água por espectrometria de emissão óptica.

-   x1: pH
-   x2: vazão - vz (mL/min)

Resposta (y): sinal analítico resultante das medições de altura de pico instrumental. O maior foi considerado como 100% e os demais como percentual relativo a este.

```{r}
library(rsm)
```

```{r}
ccd1 <- ccd(basis = ~x1+x2,
            n0 = c(0,3),
            alpha = "rotatable",
            randomize = F,
            oneblock = TRUE,
            coding = list(x1 ~ (vz - 8)/1,
                          x2 ~ (pH - 8)/1))

y <- c(68.64, 69.82, 81.66, 85.80, 
       79.29, 87.57, 74.56, 94.08,
       100, 99.41, 100)

ccd1$y <- y
ccd1
```

Modelagem.

```{r}
lm1 <- lm(y~SO(x1,x2), data = ccd1)
summary(lm1)
```

Modelagem usando comando `rsm`.

```{r}
rsm1 <- rsm(y~SO(x1,x2), data = ccd1)
summary(rsm1)
```

Condições de otimalidade.

```{r}
canonical(rsm1)
```
Modelo reduzido.

```{r}
rsm2 <- rsm(y~FO(x1,x2)+PQ(x1,x2), data = ccd1)
summary(rsm2)
```

Pressuposições.

Normalidade.

```{r}
shapiro.test(rsm2$residuals)
```

Homocedasticidade.

```{r}
library(olsrr)
lm2 <- lm(y ~ x1+x2+I(x1^2)+I(x2^2), ccd1)
ols_test_breusch_pagan(lm2, rhs=T, multiple=T)
```

Gráficos.

```{r}
contour(rsm2, ~x1+x2, image=T)
```

```{r}
persp(rsm2, ~x1+x2, col = rainbow(50),
      contours = "colors", zlab = "y (%)")
```

Comandos básicos para encontrar o pnto estacionário e fazer análise de otimalidade.

```{r}
b <- rsm2$b
B <- rsm2$B
```

ponto estacionário.

```{r}
# xs <- canonical(rsm2)$xs
xs <- -0.5*solve(B)%*%b
xs
```

Autovalores de B.

```{r}
eigen(B)
```

Previsão no ponto estacionário.

```{r}
predict(rsm2, newdata = data.frame(x1 = xs[1],
                                   x2 = xs[2]))
```

Gráfico de perspectiva passo a passo.

```{r}
xs <- seq(min(ccd1$x1), max(ccd1$x1), length = 20)
ys <- seq(min(ccd1$x2), max(ccd1$x2), length = 20)
xys <- expand.grid(x1 = xs, x2 = ys)
zs <- matrix(predict(rsm2, newdata = xys), nrow = length(xs))

n.cols <- 100
palette <- colorRampPalette(c("greenyellow", "slateblue"))(n.cols)
zfacet <- zs[-1, -1] + zs[-1, -20] + zs[-20, -1] + zs[-20, -20]
facetcol <- cut(zfacet, n.cols)

p1 <- persp(x=xs, y=ys, z=zs, theta=300, phi=30, ticktype='detailed', 
            xlab="vz", ylab="pH", zlab="y[%]", col = palette[facetcol])

with(ccd1, points(trans3d(x1,x2,y,p1), pch=20, col = "tomato", cex = 1.5))
```

```{r}
library(ggplot2)
# x1
x1_grid <- seq(min(ccd1$x1), max(ccd1$x1), 0.1)
center_grid <- rep(0,length(x1_grid))
p1 <- ggplot() +        
  geom_line(aes(x = x1_grid, 
                y = (predict(rsm2,
                             newdata = data.frame(x1 = x1_grid, 
                                                  x2 = center_grid)))),
            colour = 'firebrick1') +
  xlab("vz [mL/min]") +
  ylab("sinal [%]") + 
  ylim(58,103) + 
  scale_x_continuous(breaks = c(-1, 0, 1), label = c(7,8,9)) +
  theme_bw()
# p1

p2 <- ggplot() +        
  geom_line(aes(x = x1_grid, 
                y = (predict(rsm2,
                             newdata = data.frame(x2 = x1_grid, 
                                                  x1 = center_grid)))),
            colour = 'dodgerblue3') +
  xlab("pH") +
  ylab("sinal [%]") + 
  ylim(58,103) + 
  scale_x_continuous(breaks = c(-1, 0, 1), label = c(7,8,9)) +
  theme_bw()
# p2
  

p12 <- ggplot() +
  geom_line(aes(x = x1_grid, 
                y = predict(rsm2, 
                            newdata = data.frame(x2 = x1_grid, 
                                                 x1 = center_grid)),
                color = "8", linetype = "8")) +
  ggtitle('') +
  xlab('pH') +
  ylab('sinal [%]') +
  ylim(58,103) + 
  scale_x_continuous(breaks = c(-1, 0, 1), label = c(7,8,9)) +
  theme_bw()

x2_grid_1 = rep(-1,length(x1_grid))
x2_grid1 = rep(1,length(x1_grid))

p12 <- p12 +
  geom_line(aes(x = x1_grid,
                y = predict(rsm2,
                            newdata = data.frame(x2 = x1_grid,
                                                 x1 = x2_grid_1)),
                color = "7", linetype = "7")) +
  geom_line(aes(x = x1_grid, 
                y = predict(rsm2, 
                            newdata = data.frame(x2 = x1_grid, 
                                                 x1 = x2_grid1)),
                color = "9", linetype = "9")) +
  scale_color_manual(name = "vz", 
                     values = c("7" = "orange1", "8" = "green3", "9" = "red1")) +
  scale_linetype_manual(name = "vz", 
                     values = c("7" = "dashed", "8" = "longdash", "9" = "solid")) + theme(legend.position="top")
# p12    

library(ggpubr)
ggarrange(p1,p2)
```

```{r}
p12
```

## CCD, com k = 4 fatores

Recuperação de titânio em um processo de lixiviação.

x1: temperatura (ºC)
x2: tempo (min)
x3: concentração (mol/L)
x4: razão de sólido/líquido (gr/L), 1 gr = 64.8 mg

y: recuperação de titânio observada (%)

```{r}
library(rsm)

ccd1 <- ccd(basis = ~x1+x2+x3+x4,
            n0 = c(0,6),
            randomize = F,
            alpha = "rotatable",
            coding = list(x1 ~ (Temp - 95)/15,
                          x2 ~ (Time - 240)/60,
                          x3 ~ (C - 8)/2,
                          x4 ~ (r - 15)/5))

ccd1$y <- c(13.21, 30.5, 18.72, 42.61, 13.85, 46.27, 17.46, 53.73,
            12.82, 22.53, 20.69, 34.32, 9.45, 30.54, 10.58, 40.83, 
            5.5, 49.62, 13.16, 27.23, 16.15, 22.96, 32.16, 17.94,
            21.62, 21.13, 21.21, 19.28, 20.84, 20.45) 
```

Análise.

```{r}
rsm1 <- rsm(y ~ SO(x1,x2,x3,x4), data = ccd1)
summary(rsm1)
```

Modelo com `lm`.

```{r}
lm1 <- lm(y ~ (x1+x2+x3+x4)^2 + I(x1^2) + I(x2^2) + I(x3^2) +
            I(x4^2), ccd1)
summary(lm1)
```

Reduzindo o modelo.

```{r}
lm2 <- step(lm1, trace = 1, direction = "backward")
summary(lm2)
```

Modelo reduzido com rsm.

```{r}
rsm2 <- rsm(y ~ FO(x1,x2,x3,x4) + PQ(x1,x4) + 
               TWI(formula = ~ x1*x2+x1*x3+x1*x4+x2*x3+x3*x4),
             ccd1)
summary(rsm2)
```

Gráficos.

```{r}
par(mfrow=c(2,3))
contour(rsm2, ~ x1+x2+x3+x4, image = T)
```

```{r}
par(mfrow=c(2,3))
persp(rsm2, ~x1+x2+x3+x4, zlab = "y(%)",
      col = cm.colors(50), contours = "colors")
```

Otimização restrita.

```{r}
otim <- steepest(rsm2, dist = seq(0, 2, by = 0.1),
                 descent = F)
otim
```

```{r}
par(mfrow = c(1,2))
contour(rsm2, ~x1+x2, col = "black", decode = T,
        at = c(x3 = 0.617, x4 = -0.769))
points(c(80,110,80,110,65,125,95,95,95), c(180,180,300,300,240,240,120,360,240),
       col = "blue", pch = 19)
points(Time ~ Temp, data = otim,
       col = "magenta", pch = "*")

contour(rsm2, ~x1+x3, col = "black", decode = T,
        at = c(x2 = 0.410	, x4 = -0.769))
points(c(80,110,80,110,65,125,95,95,95), c(6,6,10,10,8,8,4,12,8),
       col = "blue", pch = 19)
points(C ~ Temp, data = otim,
       col = "magenta", pch = "*")
```

## BBD, k = 4

Sinterização de inibição seletiva de peças de polietileno de alta densidade.

- x1: espessura da camada (mm)
- x2: energia do aquecedor (J/mm^2)
- x3: velocidade de avanço do aquecedor (mm/s)
- x4: velocidade de avanço da impressora (mm/min)

y: encolhimento das peças no sentido da largura.

```{r}
design <- bbd(k = ~x1+x2+x3+x4,
              block = F,
              n0 = 5,
              randomize = F,
              coding = list(x1 ~ (Ac - 0.2)/0.1,
                            x2 ~ (Ea - 25.32)/3.16,
                            x3 ~ (vf_a - 3.5)/0.5,
                            x4 ~ (vf_p - 100)/20))

width <- c(5.3533, 5.2615, 5.0008, 4.2712, 4.5840, 2.7470, 3.8086, 3.9839, 
           4.3630, 3.5519, 4.0534, 4.0031, 5.1495, 4.5581, 4.1959, 3.5946, 
           5.1642, 4.0103, 3.6354, 4.2529, 3.5171, 4.4485, 5.3879, 3.4132, 
           3.8905, 4.3263, 4.2203, 3.9451, 3.9024)

design$y <- width
design
```

```{r}
rsm.bbd <- rsm(y ~ SO(x1,x2,x3,x4),
               data = design)
summary(rsm.bbd)
```

Gráficos.

```{r}
par(mfrow=c(2,3))
contour(rsm.bbd, ~x1+x2+x3+x4, image = T)
```

```{r}
par(mfrow=c(2,3))
persp(rsm.bbd, ~x1+x2+x3+x4, zlab = "y(mm)",
      col = rainbow(50), contours = "colors")
```

Otimização restrita.

```{r}
otimo <- steepest(rsm.bbd, dist = seq(0, sqrt(2), by = 0.1),
                  descent = T)
otimo
```

## Fatorial 3^k para RSM

Eletropolimento.

- x1: voltagem (4,6,8) V
- x2: tempo (30,45,60) min
- x3: temperatura (20,40,60) ºC

y: profundidade de polimento (um).

```{r}
plan <- expand.grid(x1 = c(-1,0,1),
                    x2 = c(-1,0,1),
                    x3 = c(-1,0,1))

d <- c(4.032, 8.545, 10.328, 4.451, 7.009, 12.437, 5.088, 8.409, 13.438, 5.719, 10.81, 17.368, 6.494, 13.124, 33.127, 10.27, 19.943, 59.087, 10.834, 20.873, 51.136, 13.64, 28.244, 67.712, 16.175, 43.145, 79.951)

plan$y <- d
plan

```

```{r}
res.fat3k <- rsm(y ~ SO(x1,x2,x3), data = plan)
summary(res.fat3k)
```

Otimização restrita.

```{r}
d <- function(x) {
  d_hat <- predict(res.fat3k,
                   newdata = data.frame(x1 = x[1],
                                        x2 = x[2],
                                        x3 = x[3]))
  return(d_hat)
}
```

```{r}
otim <- optim(par = c(0,0,0), fn = d,
              method = "L-BFGS-B", 
              lower = rep(-1,3),
              upper = rep(1,3))
otim
```

```{r}
otim$value
```

```{r}
xotim <- otim$par

voltagem <- xotim[1]*2 + 6
tempo <- xotim[2]*15 + 45
temperatura <- xotim[3]*20 + 40

c(voltagem,tempo,temperatura)
```


